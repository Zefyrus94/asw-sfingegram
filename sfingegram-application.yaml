apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-enigmiseguiti
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: postgres-enigmiseguiti
  template: 
    metadata:
      labels:
        app: sfingegram
        service: postgres-enigmiseguiti
    spec:
      containers:
      - name: postgres-enigmiseguiti
        image: postgres
        ports:
        - containerPort: 5432
        # readinessProbe: 
        #   httpGet: 
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 15
        #   periodSeconds: 10
        envFrom:
          - configMapRef:
              name: pg-enigmiseguiti-config
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: enigmiseguitidb
      volumes:
        - name: enigmiseguitidb
          persistentVolumeClaim:
            claimName: enigmiseguiti-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-enigmi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: postgres-enigmi
  template: 
    metadata:
      labels:
        app: sfingegram
        service: postgres-enigmi
    spec:
      containers:
      - name: postgres-enigmi
        image: postgres
        ports:
        - containerPort: 5432
        # readinessProbe: 
        #   httpGet: 
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 15
        #   periodSeconds: 10
        envFrom:
          - configMapRef:
              name: pg-enigmi-config
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: enigmidb
      volumes:
        - name: enigmidb
          persistentVolumeClaim:
            claimName: enigmi-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-connessioni
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: postgres-connessioni
  template: 
    metadata:
      labels:
        app: sfingegram
        service: postgres-connessioni
    spec:
      containers:
      - name: postgres-connessioni
        image: postgres
        ports:
        - containerPort: 5432
        # readinessProbe: 
        #   httpGet: 
        #     path: /actuator/health
        #     port: 8080
        #   initialDelaySeconds: 15
        #   periodSeconds: 10
        envFrom:
          - configMapRef:
              name:  pg-connessioni-config
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: connessionidb
      volumes:
        - name: connessionidb
          persistentVolumeClaim:
            claimName: connessioni-claim
---          
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enigmi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: enigmi
  template: 
    metadata:
      labels:
        app: sfingegram
        service: enigmi
    spec:
      containers:
      - name: enigmi-container
        image: sfingegram/enigmi-service-v2
        ports:
        - containerPort: 8080
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: connessioni
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: connessioni
  template: 
    metadata:
      labels:
        app: sfingegram
        service: connessioni
    spec:
      containers:
      - name: connessioni-container
        image: sfingegram/connessioni-service
        ports:
        - containerPort: 8080
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enigmiseguiti
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: enigmiseguiti
  template: 
    metadata:
      labels:
        app: sfingegram
        service: enigmiseguiti
    spec:
      containers:
      - name: enigmiseguiti-container
        image: sfingegram/enigmi-seguiti-service
        ports:
        - containerPort: 8080
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: apigateway
  template: 
    metadata:
      labels:
        app: sfingegram
        service: apigateway
    spec:
      containers:
      - name: apigateway-container
        image: sfingegram/api-gateway-service
        ports:
        - containerPort: 8080
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10

---
# postgres-enigmi:
#     restart: always
#     env_file:
#       - init_db_sfingegram_enigmi.env # configure postgres
#     volumes:
#       - database-enigmi:/var/lib/postgresql/data/ # persist data even if container shuts down
#     networks:
#       - net
#     ports:
#       - "5432"
apiVersion: v1
kind: Service
metadata:
  name: postgres-enigmiseguiti
spec:
  selector:
    app: sfingegram
    service: postgres-enigmiseguiti
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  
---

apiVersion: v1
kind: Service
metadata:
  name: postgres-enigmi
spec:
  selector:
    app: sfingegram
    service: postgres-enigmi
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  
---


apiVersion: v1
kind: Service
metadata:
  name: postgres-connessioni
spec:
  selector:
    app: sfingegram
    service: postgres-connessioni
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
  
---

apiVersion: v1
kind: Service
metadata:
  name: enigmi
spec:
  selector:
    app: sfingegram
    service: enigmi
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  
---
apiVersion: v1
kind: Service
metadata:
  name: connessioni
spec:
  selector:
    app: sfingegram
    service: connessioni
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: enigmiseguiti
spec:
  selector:
    app: sfingegram
    service: enigmiseguiti
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: apigateway
spec:
  selector:
    app: sfingegram
    service: apigateway
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
#    nodePort: 32082
###################
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sfingegram
spec:
  rules:
  - host: sfingegram 
    http: 
      paths: 
      - pathType: Prefix
        path: /
        backend: 
          service: 
            name: apigateway
            port: 
              number: 8080 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-enigmi-config
  labels:
    app: pg-enigmi
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: sfingegram-enigmi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-enigmiseguiti-config
  labels:
    app: pg-enigmiseguiti
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: sfingegram-enigmiseguiti
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-connessioni-config
  labels:
    app: pg-connessioni
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: sfingegram-connessioni
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-enigmi
  labels:
    type: local
    app: pg-enigmi
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/enigmi"
  claimRef:
    namespace: sfingegram
    name: enigmi-claim
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-enigmiseguiti
  labels:
    type: local
    app: pg-enigmiseguiti
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/enigmiseguiti"
  claimRef:
    namespace: sfingegram
    name: enigmiseguiti-claim
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-connessioni
  labels:
    type: local
    app: pg-connessioni
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/connessioni"
  claimRef:
    namespace: sfingegram
    name: connessioni-claim
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: enigmi-claim
  labels:
    app: pg-enigmi
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: enigmiseguiti-claim
  labels:
    app: pg-enigmiseguiti
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: connessioni-claim
  labels:
    app: pg-connessioni
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
###################
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-discovery-reader
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-discovery-reader-binding
subjects:
# all service accounts in any namespace
- kind: Group
  name: system:serviceaccounts
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: service-discovery-reader
  apiGroup: ""

---
# ###zookeeper
#################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: zookeeper
  template:
    metadata:
      labels:
        app: sfingegram
        service: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper
        ports:
        - containerPort: 2181
#         readinessProbe: 
#           httpGet: 
#             path: /actuator/health
#             port: 8080
#           initialDelaySeconds: 15
#           periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: sfingegram
    service: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181

##########################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sfingegram
      service: kafka
  template:
    metadata:
      labels:
        app: sfingegram
        service: kafka
        id: "0"
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka
          imagePullPolicy: Always
          env:
            - name: KAFKA_ADVERTISED_PORT
              value: "9092"
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: kafka
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_CREATE_TOPICS
              value: "enigma-service-event-channel:1:1,connessione-con-autore-service-event-channel:1:1,connessione-con-tipo-service-event-channel:1:1"
            # - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            #   value: 1
          ports:
            - containerPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: sfingegram
    service: kafka
  ports:
    - protocol: TCP
      port: 9092
      targetPort: 9092